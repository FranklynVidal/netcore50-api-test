import groovy.json.JsonSlurper

node {
    ws('netcore') {
        stage('SCM') {
            git branch: 'main', url: 'https://github.com/FranklynVidal/netcore50-api-test.git'           
        }
        stage('Build') {
            dotnet_build();
        }
        stage('Docker') {
                bat(script: 'docker login --username %UsernameDockerHub% --password %PasswordDocker%', returnStdout: true);
                bat(script: 'docker build -t franklynvidal/servicenet5 .', returnStdout: true);
                bat(script: 'docker push franklynvidal/servicenet5', returnStdout: true);            
        }
        stage('Deploy Dev') {
            steps {
                bat(script: 'az login --service-principal --username b4fb9622-b40a-455c-8217-a2056d252c1c --password BK~EW-KQ75xKtzMhi1rt97yR1k9mTAtQ0- --tenant 09379647-682d-4f10-9732-98d59413861f', returnStdout: true);
                bat(script: 'az account set --subscription 74cf483d-175e-4547-8682-a7904b4baf57', returnStdout: true);
                bat(script: 'az container restart --name netcore50 --resource-group DEVOPS_SEP', returnStdout: true);
                //bat(script: 'az container delete --resource-group aforo255Devops --name micro5testservice --yes', returnStdout: true);
                //bat(script: 'az container create --resource-group aforo255Devops --name micro5testservice --image antony0618/servicenet5:latest --dns-name-label micro5testservice --ports 80', returnStdout: true);
            }
        }
        stage('Deploy AKS') {
            steps {
                //bat(script: 'az aks get-credentials --resource-group aforo255Devops --name aforo255jenkins & kubectl config get-contexts --kubeconfig=%KUBE_PATH_CONFIG%', returnStdout: true);
                bat(script: 'az aks get-credentials --resource-group DEVOPS_SEP --name aksdevops & kubectl config get-contexts --kubeconfig=%KUBE_PATH_CONFIG%', returnStdout: true);
                bat(script: 'kubectl config use-context aksdevops --kubeconfig=%KUBE_PATH_CONFIG%', returnStdout: true);
                bat(script: 'kubectl delete --all pods --kubeconfig=%KUBE_PATH_CONFIG% & kubectl apply -f k8s.yml --kubeconfig=%KUBE_PATH_CONFIG%', returnStdout: true);
            }
        }    
    }
}

def dotnet_build() {
    bat(script: 'dotnet restore', returnStdout: true);
    bat(script: 'dotnet build', returnStdout: true);
    bat(script: 'dotnet test', returnStdout: true);
}
